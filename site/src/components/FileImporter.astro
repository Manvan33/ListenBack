---
interface Props {
	desc: string;
}

const { desc } = Astro.props;
---

<h2>Search in history</h2>
<input id="search-date" type="datetime-local"/>
<input id="search-button" type="button" value="Search"/>
<p id="search-result"></p>
<h2>Import history files</h2>
<input type="file" class="history-importer" multiple accept=".json"/>
<h3>History files</h3>
<ul id="storage-list">

</ul>
<script>

update();
let d = new Date();
d.setFullYear(d.getFullYear() - 1);

const search_date = document.getElementById("search-date");
(search_date as HTMLInputElement).valueAsDate = d;

function update() {
    const ul = document.getElementById("storage-list")!;
    const index = JSON.parse(localStorage.getItem("index") || "{}");
    ul.innerHTML = "";
    const storage = window.localStorage;
    for (const filename of Object.keys(index)) {
        const li = document.createElement("li");
        li.innerHTML = filename + " - " + index[filename].startTime + " to " + index[filename].endTime;
        ul.appendChild(li);
    }
}

function get_song_interval({endTime, msPlayed}: {endTime: string, msPlayed: number}): [Date, Date]{
    return convert_to_start(endTime, msPlayed);
}

function convert_to_start(endTime: string, msPlayed: number): [Date, Date] {
    // console.log(`Getting song interval for ${endTime} and ${msPlayed}`);
    // Convert "endTime" : "2023-08-16 20:02", to a timestamp
    const end = new Date(endTime);
    // Computes the startTime from the msPlayed
    const start = new Date(end.getTime() - msPlayed);
    // console.log(`Start: ${start}, end: ${end}`);
    return [start, end];
}

function index_history(name: string, content:string) {
    console.log("Indexing history: " + name);
    // history = json.load(content)
    let history = JSON.parse(content);
    // Find the interval of time between the first and last songs of the history
    const start = get_song_interval(history[0])[0].toDateString();
    const end = get_song_interval(history[history.length-1])[1].toDateString();
    const saved_index = localStorage.getItem("index") || "{}";
    let index = JSON.parse(saved_index);
    const entry = {
        'startTime': start,
        'endTime': end
    }
    index[name] = entry;
    localStorage.setItem("index", JSON.stringify(index));
    update();
}

const file_inputs = document.querySelectorAll(".history-importer");
for (const node of file_inputs) {
    node.addEventListener("change", (e: Event) => {
        const files = (node as HTMLInputElement).files;
        for (let i = 0; i < files!.length; i++) {
            const file = files![i];
            const reader = new FileReader();
            reader.onload = function (e) {
                const content = e.target!.result;
                localStorage.setItem(file.name, content as string);
                index_history(file.name, content as string);
            };
            reader.readAsText(file);
        }
    });
};

function history_file_for_moment(moment: Date): string | null {
    const index = JSON.parse(localStorage.getItem("index") || "{}");
    for (const file of Object.keys(index)) {
        const start = new Date(index[file].startTime);
        const end = new Date(index[file].endTime);
        if (start <= moment && moment <= end) {
            return file;
        }
    }
    return null;
}

document.getElementById("search-button")?.addEventListener("click", () => {
    const input = document.getElementById("search-date") as HTMLInputElement;
    const result = document.getElementById("search-result")!;
    const moment = new Date(input.value);
    const song_result = find_closest_song(moment);
    if (song_result === null) {
        result.innerHTML = "History for this moment is not available.";
        return;
    }
    const [closest_entry, closest_interval, is_in_interval] = song_result;
    if (is_in_interval) {
        const song = closest_entry.trackName;
        const artist = closest_entry.artistName;
        const start = closest_interval[0].toLocaleTimeString();
        const end = closest_interval[1].toLocaleTimeString();
        result.innerHTML = `The song "${song}" by ${artist} was playing between ${start} and ${end}`;
    } else {
        const start = closest_interval[0].toLocaleTimeString();
        const end = closest_interval[1].toLocaleTimeString();
        result.innerHTML = `No song was playing at this exact moment. The closest song was "${closest_entry.trackName}" by ${closest_entry.artistName}. It was playing between ${start} and ${end}`;
    }
});

function find_closest_song(moment: Date): [Object, [Date, Date], boolean] | null {
    /**
     * Finds the closest entry in the history file for a given moment.
     * 
     * @param {Date} moment - The moment to find the closest entry for.
     * @returns {Array} - An array containing the closest entry, its interval, and a boolean indicating if the moment is within the interval.
     */
    const history_file = history_file_for_moment(moment);
    // console.log(`${moment} can be found in ${history_file}`);
    if (history_file === null) {
        console.log("No file contains the moment");
        return null;
    }
    const history = JSON.parse(localStorage.getItem(history_file) || "[]");
    let i = 0;
    let closest_entry = history[i];
    let closest_interval = get_song_interval(closest_entry);
    while (closest_interval[0] < moment) {
        if (closest_interval[0] < moment && moment < closest_interval[1]) {
            return [closest_entry, closest_interval, true];
        }
        i += 1;
        closest_entry = history[i];
        closest_interval = get_song_interval(closest_entry);
    }
    return [closest_entry, closest_interval, false];
}

</script>